const midi_info = require('midi-info');

const qnDuration = midi_info.Constants.Pulses.DURATION_CROCHET;


function N(duration, note, octave) {
    let durationList = duration;

    if (typeof duration != typeof []) {
        durationList = [ duration ];
    }

    let pitch = midi_info.Constants.Notes.MIDDLE_C;

    pitch += midi_info.Names.getMIDIFronName(note);
    pitch += octave ? octave*12 : 0;

    let totalDuration = 0;
    durationList.forEach((d) => {
      totalDuration += (qnDuration * 4) / d;
    });

  return {
    isRest: note == undefined,
    pitch:  pitch,
    duration: totalDuration
  }

}

// Taken from https://codepen.io/jak_e/pen/NrjdLY
const patternData = [
      [ // 1
        N(4,'E'), N(4,'E'), N(4,'E')
      ],
      [ // 2
        N(8,'E'), N(8,'F'), N(4,'E')
      ],
      [ // 3
        N(8), N(8,'E'), N(8,'F'), N(8,'E')
      ],
      [ // 4
        N(8), N(8,'E'), N(8,'F'), N(8,'G')
      ],
      [ // 5
        N(8,'E'), N(8,'F'), N(8,'G'), N(8)
      ],
      [ // 6
        N([1,1],'C',1)
      ],
      [ // 7
        N([4,4,4,8]), N(16,'C'), N(16,'C'), N(8,'C'), N([8,4,4,4,4])
      ],
      [ // 8
        N([1,2],'G'), N([1,1],'F')
      ],
      [ // 9
        N(16,'B'), N(16,'G'), N([8,4,4,4])
      ],
      [ // 10
        N(16,'B'), N(16,'G')
      ],
      [ // 11
        N(16,'F'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B'), N(16,'G')
      ],
      [ // 12
        N(16,'F'), N(16,'G'), N(1,'B'), N(4,'C',1)
      ],
      [ // 13
        N(16,'B'), N([8,16],'G'), N(16,'G'), N(16,'F'), N(8,'G'), N([8,16]), N([16,2,4],'G')
      ],
      [ // 14
        N(1,'C',1), N(1,'B'), N(1,'G'), N(1,'F#')
      ],
      [ // 15
        N(16,'G'), N([8,16,4,4,4])//todo
      ],
      [ // 16
        N(16,'G'), N(16,'B'), N(16,'C',1), N(16,'B')
      ],
      [ // 17
        N(16,'B'), N(16,'C'), N(16,'B'), N(16,'C'), N(16,'B'), N(16)
      ],
      [ // 18
        N(16,'E'), N(16,'F#'), N(16,'E'), N(16,'F#'), N([8,16],'E'), N(16,'E')
      ],
      [ // 19
        N([4,8]), N([4,8],'G',1)
      ],
      [ // 20
        N(16,'E'), N(16,'F#'), N(16,'E'), N(16,'F#'), N([8,16],'B',-1), 
        N(16,'E'), N(16,'F#'), N(16,'E'), N(16,'F#'), N(16,'E')
      ],
      [ // 21
        N([2,4],'F#')
      ],
      [ // 22
        N([4,8],'E'), N([4,8],'E'), N([4,8],'E'), N([4,8],'E'), N([4,8],'E'), 
        N([4,8],'F#'), N([4,8],'G'), N([4,8],'A'), N(8,'B')
      ],
      [ // 23
        N(8,'E'), N([4,8],'F#'), N([4,8],'F#'), N([4,8],'F#'), N([4,8],'F#'), N([4,8],'F#'), 
        N([4,8],'G'), N([4,8],'A'), N(4,'B'), 
      ],
      [ // 24
        N(8,'E'), N(8,'F#'), N([4,8],'G'), N([4,8],'G'), N([4,8],'G'), N([4,8],'G'), N([4,8],'G'),
        N([4,8],'A'), N(8,'B')
      ],
      [ // 25
        N(8,'E'), N(8,'F#'), N(8,'G'), N([4,8],'A'), N([4,8],'A'), N([4,8],'A'), N([4,8],'A'), 
        N([4,8],'A'), N([4,8],'B')
      ],
      [ // 26
        N(8,'E'), N(8,'F#'), N(8,'G'), N(8,'A'), N([4,8],'B'), N([4,8],'B'), N([4,8],'B'),
        N([4,8],'B'), N([4,8],'B')
      ],
      [ // 27
        N(16,'E'), N(16,'F#'), N(16,'E'), N(16,'F#'), N(8,'G'), N(16,'E'), N(16,'G'),
        N(16,'F#'), N(16,'E'), N(16,'F#'), N(16,'E')
      ],
      [ // 28
        N(16,'E'), N(16,'F#'), N(16,'E'), N(16,'F#'), N([8,16],'E'), N(16,'E')
      ],
      [ // 29
        N([2,4],'E'), N([2,4],'G'), N([2,4],'C',1) // todo [2,4] is a dotted, but duration isn't
      ],
      [ // 30
        N([1,2],'C',1)
      ],
      [ // 31
        N(16,'G'), N(16,'F'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B')
      ],
      [ // 32
        N(16,'F'), N(16,'G'), N(16,'F'), N(16,'G'), N(16,'B'), N([16,2,4],'F'), N([4,8],'G')
      ],
      [ // 33
        N(16,'G'), N(16,'F'), N(8)
      ],
      [ // 34
        N(16,'G'), N(16,'F')
      ],
      [ // 35
        N(16,'F'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B'), N(16,'G'), 
        N([8,4,4,4]), N(4,'A#'), N([2,4],'G',1), N(8,'A',1), N([8,8],'G',1), N(8,'B',1), N([4,8],'A',1), N(8,'G',1), N([2,4],'E',1),
        N(8,'G',1), N([8,2,4],'F#',1), N([4,4,8]), N([8,2],'E',1), N([2,4],'F',1)
      ],
      [ // 36
        N(16,'F'), N(16,'G'), N(16,'B'), N(16,'G'), N(16,'B'), N(16,'G')
      ],
      [ // 37
        N(16,'F'), N(16,'G')
      ],
      [ // 38
        N(16,'F'), N(16,'G'), N(16,'B')
      ],
      [ // 39
        N(16,'B'), N(16,'G'), N(16,'F'), N(16,'G'), N(16,'B'), N(16,'C',1)
      ],
      [ // 40
        N(16,'B'), N(16,'F')
      ],
      [ // 41
        N(16,'B'), N(16,'G')
      ],
      [ // 42
        N(2,'C',1), N(2,'B'), N(2,'A'), N(2,'C',1)
      ],
      [ // 43
        N(16,'F',1), N(16,'E',1), N(16,'F',1), N(16,'E',1), N(8,'E',1), N(8,'E',1), N(8,'E',1), N(16,'F',1), N(16,'E',1)
      ],
      [ // 44
        N(8,'F',1), N([8,8],'E',1), N(8,'E',1), N(4,'C',1)
      ],
      [ // 45
        N(4,'D',1), N(4,'D',1), N(4,'G')
      ],
      [ // 46
        N(16,'G'), N(16,'D',1), N(16,'E',1), N(16,'D',1), N(8), N(8,'G'), N(8), N(8,'G'), N(8), N(8,'G'),
        N(16,'G'), N(16,'D',1), N(16,'E',1), N(16,'D',1)
      ],
      [ // 47
        N(16,'D',1), N(16,'E',1), N(8,'D',1)
      ],
      [ // 48
        N([1,2],'G'), N(1,'G'), N([1,4],'F')
      ],
      [ // 49
        N(16,'F'), N(16,'G'), N(16,'A#'), N(16,'G'), N(16,'A#'), N(16,'G')
      ],
      [ // 50
        N(16,'F'), N(16,'G')
      ],
      [ // 51
        N(16,'F'), N(16,'G'), N(16,'A#')
      ],
      [ // 52
        N(16,'G'), N(16,'A#')
      ],
      [ // 53
        N(16,'A#'), N(16,'G')
      ]
    ]

    function getPattern(idx) {
        return patternData[idx];
    }

    function getPatternCount() {
        return patternData.length
    }
        
  function getState() {
    return {
        beatsPerBar: 3,
        bpm: 90,
        patternLength: getPatternCount()
    };
  }

  console.log(getPattern(28))

module.exports = {
    getPatternCount,
    getPattern,
    getState
};
